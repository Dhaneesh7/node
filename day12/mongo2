const MongoClient = require('mongodb').MongoClient;
const ObjectId = require('mongodb').ObjectId;
const url = "mongodb://localhost:27017/";
const dbName = "student";





app.get('/students/paginated', function (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 5;
  const skip = (page - 1) * limit;

  
    const students = dbo.Student.find({}, { name: 1, age: 1, _id: 0 })
      .skip(skip)
      .limit(limit);
    
    const total = dbo.Student.countDocuments();

    res.json({
      currentPage: page,
      totalPages: Math.ceil(total / limit),
      totalStudents: total,
      students
    });
});

app.delete('/students/drop', async (req, res) => {
  
    dboStudent.collection.drop();
    res.json({ message: 'Student collection dropped' });
  
   /* res.status(500).json({ error: 'Collection drop failed or already dropped' });
  */
});


app.post('teacher/insertteachers', function(req,res)=>{
Teachers=req.body;
 dbo.collection("teacher").insertMany(Teachers, function (err, res) {
        if (err) throw err;

res.json({ success: true, message: ` Teachers inserted` });
 console.log(`Teachers inserted`);
        client.close();
      });
}

app.get('teacher/avgsalary', function(req,res)=>{
Teachers=req.body;
 dbo.collection("teacher").insertMany(Teachers, function (err, res) {
        if (err) throw err;

res.json({ success: true, message: ` Teachers inserted` });
 console.log(`Teachers inserted`);
        client.close();
      });
}
app.get('teacher/oldest', function(req,res)=>{
const teacher = dbo.teacher.find().sort({ age:-1 }).limit(1);
    res.json(teacher[0]);
}
app.get('teacher/youngest', function(req,res)=>{
const teacher =dbo.teacher.find().sort({ age: 1 }).limit(1);
    res.json(teacher[0]);
}

app.get('teacher/highsalary', function(req,res)=>{
const teacher = dbo.teacher.find().sort({ salary: -1 }).limit(1);
    res.json(teacher[0]);
}
function validation (){

}




//day13



app.get('/students/failed', function (req, res) => {
  const failed =  dbo.studentsCollection.find({ mark: { $lt: 35 } }).toArray();
  res.json(failed);
});

// Find passed students (names only)
app.get('/students/passed-names', async (req, res) => {
  const passed = dbo.studentsCollection.find({ mark: { $gte: 35 } }, { projection: { name: 1, _id: 0 } }).toArray();
  res.json(passed);
});



function validateStudent(req, res) {
  const { name, age, mark } = req.body;
  if (!name || typeof age !== 'number' || age <= 5 || age >= 100 ||
      typeof mark !== 'number' || mark < 0 || mark > 100) {
    return res.status(400).json({ error: 'Invalid student data' });
  }
  
}
app.put('/students/update-by-name', function (req, res) => {
  const { name, update } = req.body;
  const result =dbo.studentsCollection.updateOne({ name }, { $set: update });
  res.json(result);
});

app.put('/students/update', function (req, res) => {
  const name = req.query.name;
  const update = req.body;
  const result = dbo.studentsCollection.updateOne({ name }, { $set: update });
  res.json(result);
});

app.delete('/students/delete-by-name', function (req, res) => {
  const { name } = req.body;
  const result =  dbo.studentsCollection.deleteOne({ name });
  res.json(result);
});

app.put('/students/id', function (req, res) => {
  const { id } = req.params;
  const { ObjectId } = require('mongodb');
  const result = dbo.studentsCollection.updateOne(
    { _id: new ObjectId(id) },
    { $set: req.body }
  );
  res.json(result);
});

app.delete('/students/id', function (req, res) => {
  const { id } = req.params;
  const { ObjectId } = require('mongodb');
  const result = dbo. studentsCollection.deleteOne({ _id: new ObjectId(id) });
  if (result.deletedCount === 1) {
    res.json({ message: "Student deleted" });
  } else {
    res.status(404).json({ message: "Student not found" });
  }
});

app.post('/insertstudents', validateStudent, function (req, res) => {
  const result = dbo.studentsCollection.insertOne(req.body);
  res.status(201).json(result);
});